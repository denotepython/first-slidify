geom_bar(position = "dodge", stat = "identity")
ggplot(cabbage_exp, aes(x = Date, y = Weight, linestyle = Cultivar)) +
geom_bar(position = "dodge", stat = "identity")
ggplot(cabbage_exp, aes(x = Date, y = Weight, fill = Cultivar)) +
geom_bar(position = "dodge", stat = "identity", fill = "blue")
ggplot(cabbage_exp, aes(x = Date, y = Weight, fill = Cultivar)) +
geom_bar(position = "dodge", stat = "identity", color = "blue")
install.packages("RColorBrewer")
library(RColorBrewer)
ggplot(cabbage_exp, aes(x = Date, y = Weight, fill = Cultivar)) +
geom_bar(position = "dodge", stat = "identity", color = "blcak")+
scale_fill_brewer(palette = "Pastell")
ggplot(cabbage_exp, aes(x = Date, y = Weight, fill = Cultivar)) +
geom_bar(position = "dodge", stat = "identity", color = "black")+
scale_fill_brewer(palette = "Pastell")
?scale_fill_brewer
ggplot(cabbage_exp, aes(x = Date, y = Weight, fill = Cultivar)) +
geom_bar(position = "dodge", stat = "identity", color = "black")+
scale_fill_brewer(palette = "Pastel1")
ggplot(diamonds, aes(x = cut))+
geom_bar()
ggplot(diamonds, aes(x = cut))+
geom_bar(stat = "bin")
geom_bar(stat = "bin")
ggplot(diamonds, aes(x = cut))+
geom_bar(stat = "bin")
ggplot(diamonds, aes(x = cut))+
geom_bar(stat = "count")
ggplot(diamonds, aes(x = carcat))+
geom_bar()
ggplot(diamonds, aes(x = carat))+
geom_bar()
?geom_bar
ggplot(diamonds, aes(x = carat))+
geom_bar(width = 0.5)
ggplot(diamonds, aes(x = carat))+
geom_bar(width = 0.2)
ggplot(diamonds, aes(x = carat))+
geom_bar(width = 0.1)
ggplot(diamonds, aes(x = carat))+
geom_bar(width = 0.2)
ggplot(diamonds, aes(x = carat))+
geom_bar(width = 0.2)
view(uspopchange)
View(uspopchange)
upc <- subset(uspopchange, rank(Change) > 40)
temp <- rank(uspopchange$Change)
View(temp)
temp <- sort(uspopchange$Change)
View(temp)
upc
ggplot(upc, aes(x = Abb, y = Change, fill = Region))+
geom_bar(stat = "identity")
ggplot(upc, aes(x = Abb, y = Change, fill = State))+
geom_bar(stat = "identity")
ggplot(cabbage_exp, aes(x = Date, y = Weight, fill = Cultivar)) +
geom_bar(position = "dodge", stat = "identity")
ggplot(cabbage_exp, aes(x = Date, y = Weight, fill = Cultivar)) +
geom_bar(stat = "identity")
ggplot(upc, aes(x = Abb, y = Change, fill = Region))+
geom_bar(stat = "identity")
ggplot(upc, aes(x = reorder(Abb, Change), y = Change, fill = Region))+
geom_bar(stat = "identity")
csub <- subset(climate, Source == "Berkeley" & Year >= 1900)
View(csub)
csub$pos <- csub$Anomaly10y >= 0
View(csub)
ggplot(csub, aes(x = Year, y = Anomaly10y, fill = pos))+
geom_bar(stat = "identity")
ggplot(csub, aes(x = Year, y = Anomaly10y, fill = pos))+
geom_bar(stat = "identity", position = "identity")
ggplot(csub, aes(x = Year, y = Anomaly10y, fill = pos))+
geom_bar(stat = "identity", position = "identity", color = "black")
ggplot(csub, aes(x = Year, y = Anomaly10y, fill = pos))+
geom_bar(stat = "identity", position = "identity", color = "black", size = 0.1)
ggplot(cabbage_exp, aes(x = Date, y = Weight, fill = Cultivar))+
geom_bar(stat = "identity", width = 0.5, position = "dodge")
ggplot(cabbage_exp, aes(x = Date, y = Weight, fill = Cultivar))+
geom_bar(stat = "identity", position = "dodge")
ggplot(cabbage_exp, aes(x = Date, y = Weight, fill = Cultivar))+
geom_bar(stat = "identity", position = position_dodge(0.95))
ggplot(cabbage_exp, aes(x = Date, y = Weight))+
geom_bar(stat = "identity")
ggplot(cabbage_exp, aes(x = Date, y = Weight))+
geom_bar(stat = "identity", position = position_dodge(0.55))
ggplot(cabbage_exp, aes(x = Date, y = Weight, fill = Cultivar))+
geom_bar(stat = "identity", width = 0.5, position = "dodge")
ggplot(cabbage_exp, aes(x = Date, y = Weight, fill = Cultivar))+
geom_bar(stat = "identity")
ggplot(cabbage_exp, aes(x = Date, y = Weight, fill = Cultivar))+
geom_bar(stat = "identity")+
guides(fill = guide_legend(reverse = TRUE))
system.time
?system.time
myfun <- function(x){
return exp(x)
}
myfun <- function(x){
return exp(x)
}
myfun <- function(x){
return exp(x)}
myfun <- function(x){
exp(x)}
system.time(myfun(2))
system.time(myfun(c(1:10000)))
myfunc(1:10000)
myfun(1:10000)
myfun <- function(x){
log(x)}
system.time(myfun(c(1:10000)))
myfun(1:10000)
system.time(myfun(c(1:10000)))
system.time(myfun(c(1:1E10)))
system.time(myfun(c(1:1E8)))
library(plyr)
library(gcookbook)
library(ggplot2)
ggplot(cabbage_exp,aes(x = Date, y = Weight, fill = Cultivar, order = desc(Cultivar)))+
geom_bar(stat = "indentity")
ggplot(cabbage_exp,aes(x = Date, y = Weight, fill = Cultivar, order = desc(Cultivar)))+
geom_bar(stat = "identity")
ce <- ddply(cabbage_exp, "Date", transform, per_weight = Weight / sum(Weight) * 100)
ggplot(cabbage_exp, aes(x = Date, y = per_weight))+
geom_bar(stat = "identity")
ce <- ddply(cabbage_exp, "Date", transform, per_weight = Weight / sum(Weight) * 100)
ggplot(cabbage_exp, aes(x = Date, y = per_weight, fill = Cultivar))+
geom_bar(stat = "identity")
View(cabbage_exp)
ggplot(ce, aes(x = Date, y = per_weight, fill = Cultivar))+
geom_bar(stat = "identity")
View(ce)
ggplot(cabbage_exp, aes(x = Date, y = Weight, fill = Cultivar))+
geom_bar(position = "dodge", stat = "identity")+
geom_text(aes(label = Weight), vjust = 0)
ggplot(cabbage_exp, aes(x = Date, y = Weight, fill = Cultivar))+
geom_bar(position = "dodge", stat = "identity")+
geom_text(aes(label = Weight), vjust = 0.2)
ggplot(cabbage_exp, aes(x = Date, y = Weight, fill = Cultivar))+
geom_bar(position = "dodge", stat = "identity")+
geom_text(aes(label = Weight), vjust = 2.2)
ggplot(cabbage_exp, aes(x = Date, y = Weight, fill = Cultivar))+
geom_bar(position = "dodge", stat = "identity")+
geom_text(aes(label = Weight), vjust = -2.2)
ggplot(cabbage_exp, aes(x = Date, y = Weight, fill = Cultivar))+
geom_bar(position = "dodge", stat = "identity")+
geom_text(aes(label = Weight), vjust = -0.2)
ggplot(cabbage_exp, aes(x = Date+Cultivar, y = Weight))+
geom_bar(position = "dodge", stat = "identity")+
geom_text(aes(label = Weight), vjust = -0.2)
ggplot(cabbage_exp, aes(x = interaction(Date,Cultivar), y = Weight))+
geom_bar(position = "dodge", stat = "identity")+
geom_text(aes(label = Weight), vjust = -0.2)
ggplot(cabbage_exp, aes(x = Date, y = Weight, fill = Cultivar))+
geom_bar(position = "dodge", stat = "identity")+
geom_text(aes(label = Weight), vjust = -0.2, position = "dodge")
ggplot(cabbage_exp, aes(x = Date, y = Weight, fill = Cultivar))+
geom_bar(position = "dodge", stat = "identity")+
geom_text(aes(label = Weight), vjust = -0.2, position = position_dodge(0.9))
?arrange
?plyr::arrange
ce <- arrange(cabbage_exp, Date, Ciltivar)
ce <- arrange(cabbage_exp, Date, Cultivar)
ce
ce <- arrange(cabbage_exp, Cultivar, Date)
ce
View(ce)
ce <- ddply(cabbage_exp, "Date", transform, per_weight = Weight / sum(Weight) * 100)
View(ce)
ce <- arrange(cabbage_exp, Cultivar, Date)
ce
ce <- ddply(ce, "Date", transform, label_y = cunsum(Weight))
ce <- ddply(ce, "Date", transform, label_y = cumsum(Weight))
ce
ggplot(ce, aes(x = Date, y = Weight, fill = Cultivar))+
geom_bar(stat = "identity")+
geom_text(aes(y = label_y, label = Weight), vjust = 1.5, color = "white")
ggplot(ce, aes(x = Date, y = Weight, fill = Cultivar))+
geom_bar(stat = "identity")+
geom_text(aes(y = label_y, label = per_weight), vjust = 1.5, color = "white")
ce <- ddply(cabbage_exp, "Date", transform, per_weight = Weight / sum(Weight) * 100)
ce <- arrange(ce, Cultivar, Date)
ce <- ddply(ce, "Date", transform, label_y = cumsum(Weight))
ggplot(ce, aes(x = Date, y = Weight, fill = Cultivar))+
geom_bar(stat = "identity")+
geom_text(aes(y = label_y, label = per_weight), vjust = 1.5, color = "white")
ggplot(ce, aes(x = Date, y = Weight, fill = Cultivar))+
geom_bar(stat = "identity")+
geom_text(aes(y = label_y, label = Weigth), vjust = 1.5, color = "white")
geom_text(aes(y = label_y, label = Weight), vjust = 1.5, color = "white")
ggplot(ce, aes(x = Date, y = Weight, fill = Cultivar))+
geom_bar(stat = "identity")+
geom_text(aes(y = label_y, label = Weight), vjust = 1.5, color = "white")
?cumsum
ggplot(ce, aes(x = Date, y = Weight, fill = Cultivar))+
geom_bar(stat = "identity")+
geom_text(aes(y = label_y, label = Weight), vjust = 0.5*Weight, color = "white")
ggplot(ce, aes(x = Date, y = Weight, fill = Cultivar))+
geom_bar(stat = "identity")+
geom_text(aes(y = label_y, label = Weight), vjust = 0.5*ce$Weight, color = "white")
ggplot(ce, aes(x = Date, y = Weight, fill = Cultivar))+
geom_bar(stat = "identity")+
geom_text(aes(y = label_y, label = Weight), vjust = 3, color = "white")
ce <- ddply(ce, "Date", transform, label_y = cumsum(Weight) - 0.5 * Weight)
ggplot(ce, aes(x = Date, y = Weight, fill = Cultivar))+
geom_bar(stat = "identity")+
geom_text(aes(y = label_y, label = Weight), vjust = 1.5, color = "white")
ce <- ddply(ce, "Date", transform, label_y = cumsum(Weight) - 0.5 * Weight)
ggplot(ce, aes(x = Date, y = Weight, fill = Cultivar))+
geom_bar(stat = "identity")+
geom_text(aes(y = label_y, label = Weight), color = "white")
ggplot(ce, aes(x = Date, y = Weight, fill = Cultivar))+
geom_bar(stat = "identity")+
geom_text(aed(y = label_y, label = paste(format(Weight, nsmall = 2), "kg")))+
guidefill = guide_legend(reverse = TRUE)
ggplot(ce, aes(x = Date, y = Weight, fill = Cultivar))+
geom_bar(stat = "identity")+
geom_text(aes(y = label_y, label = paste(format(Weight, nsmall = 2), "kg")))+
guidefill = guide_legend(reverse = TRUE)
ggplot(ce, aes(x = Date, y = Weight, fill = Cultivar))+
geom_bar(stat = "identity")+
geom_text(aes(y = label_y, label = paste(format(Weight, nsmall = 2), "kg")))+
guidefill = guide_legend(reverse = TRUE)
ggplot(ce, aes(x = Date, y = Weight, fill = Cultivar))+
geom_bar(stat = "identity")+
geom_text(aes(y = label_y, label = paste(format(Weight, nsmall = 2), "kg")))
ggplot(ce, aes(x = Date, y = Weight, fill = Cultivar))+
geom_bar(stat = "identity")+
geom_text(aes(y = label_y, label = paste(format(Weight, nsmall = 2), "kg")))+
guides(fill = guide_legend(reverse = TRUE)
)
tophit <- tophitters2001[1:25,]
tophit
ggplot(tophit, aes(x = avg, y = name)) +
geom_plot()
ggplot(tophit, aes(x = avg, y = name)) +
geom_point()
ggplot(tophit, aes(x = recorder(name, avg), y = name)) +
geom_point()
ggplot(tophit, aes(x = reorder(name, avg), y = name)) +
geom_point()
ggplot(tophit, aes(x = reorder(name, avg), y = avg)) +
geom_point()
ggplot(tophit, aes(x = reorder(name, avg), y = avg)) +
geom_point()+
theme_bw()
ggplot(tophit, aes(x = reorder(name, avg), y = avg)) +
geom_point()
ggplot(tophit, aes(x = reorder(name, avg), y = avg)) +
geom_point()
ggplot(tophit, aes(x = reorder(name, avg), y = avg)) +
geom_point()+
theme_bw()+
theme(axis.text.x = element_text(angel = 60))
ggplot(tophit, aes(x = reorder(name, avg), y = avg)) +
geom_point()+
theme_bw()+
theme(axis.text.x = element_text(angle = 60))
ggplot(tophit, aes(x = reorder(name, avg), y = avg)) +
geom_point()+
theme_bw()+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
library(REmap)
demoC
install.packages("leafet")
install.packages("ggmap")
install.packages("baidumap")
install.packages("leafet")
install.packages("slidefy")
install.packages("slidify")
head(colwise(round)(iris[,1:4]))
library(plyr)
head(colwise(round)(iris[,1:4]))
dcast(data = iris, Species~.)
reshape2::dcast(data = iris, Species~.)
install.packages("Rweibo")
library(devtools)
install_github("ramnath/slidifyLibraries")
install_github("lchiffon/slidify")
install_github("ramnath/slidifyLibraries")
library(slidify)
?slidify
install.packages("DiammeR")
install.packages("Leftlet")
install.packages("C5.0")
install.packages("gbm")
install.packages("ks")
library(C50)
install.packages("nnet")
install.packages("mxnet")
install.packages("kernlab")
install.packages("tm")
install.packages("tmcn")
install.packages("jiebaR")
install.packages("stringi")
install.packages("Rattler")
install.packages("Rattle")
install.packages("rattle")
install.packages("tm")
install.packages("SnowballC")
install.packages("RColorBrewer")
install.packages("lsa")
install.packages("pvclust")
install.packages("mclust")
install.packages("mclust")
setwd("G:/graduate-student/研究生/课件/大数据研讨专题/week1/homework1")
raw <- read.csv("raw.csv", header = TRUE)
head(raw)
setwd("G:/graduate-student/研究生/课件/大数据研讨专题/week1/homework1")
raw <- read.csv("raw.csv", header = TRUE)
View(raw)
summary(raw)
str(raw)
library(tm)
corp <- Corpus(DataframeSource(Raw))
library(tm)
corp <- Corpus(DataframeSource(raw))
?DataframeSource
library(tm)
corp <- Corpus(raw)
library(tm)
corp <- Corpus(DataframeSource(raw))
View(corp)
corp
corp[[2]]
writeLines(as.character(corp[[2]]))
lapply(corp, as.character)
corp1 <- tm_map(corp, content_transformer(tolower))
tail(corp1)
corp1
library(tm)
raw <- as.matrix(raw)
corp <- Corpus(DataframeSource(raw))
corp
class(raw)
class(corp)
hc <- hclust(chapdist, method = "ward.D")
library(tm)
getSources() #查看支持的来源
getReaders() #查看支持的格式
setwd("G:/graduate-student/研究生/课件/大数据研讨专题/week1/homework1")
raw <- read.csv("raw.csv", header = TRUE)
View(raw)
str(raw)
library(tm)
raw <- as.matrix(raw) #这一句没有就会错误
corp <- Corpus(DataframeSource(raw))
inspect(corp[1])
writeLines(as.character(corp[[1]]))
lapply(corp[665:667], as.character)
getTransformations()
corp <- tm_map(corp, content_transformer(tolower))
writeLines(as.character(corp[[600]]))
stopword <- stopwords("english")
head(stopword)
length(stopword)
corp <- tm_map(corp,removeWords, stopwords("english"))
writeLines(as.character(corp[[600]]))
corp <- tm_map(corp, stemDocument)
writeLines(as.character(corp[[600]]))
stemDocumentfix <- function(x)
{
PlainTextDocument(paste(stemDocument(unlist(strsplit(as.character(x), " "))),collapse=' '))
}
corp <- tm_map(corp, stemDocumentfix)
dataframe<-data.frame(text=unlist(sapply(corp, `[`, "content")),stringsAsFactors=F)
View(dataframe)
dtm <- DocumentTermMatrix(corp)
dtm
freq <- colSums(as.matrix(dtm))
length(freq)
inspect(dtm[1:5, 1:5])
tdm <- TermDocumentMatrix(corp)
inspect(tdm[1:5,1:5])
tdm <- as.matrix(tdm)
findFreqTerms(dtm, 50)
corr <- cor(as.matrix(dtm))
corr[1:5,1:5]
findAssocs(dtm, "cat", 0.3)
simcorp <- removeSparseTerms(dtm, 0.4)
simcorp
chapdist <- dist(as.matrix(dtm), method = "binary")
simcorp <- removeSparseTerms(dtm, 0.4)
library(tm)
getSources() #查看支持的来源
library(tm)
getSources() #查看支持的来源
getReaders() #查看支持的格式
setwd("G:/graduate-student/研究生/课件/大数据研讨专题/week1/homework1")
raw <- read.csv("raw.csv", header = TRUE)
View(raw)
str(raw)
library(tm)
raw <- as.matrix(raw) #这一句没有就会错误
corp <- Corpus(DataframeSource(raw))
inspect(corp[1])
writeLines(as.character(corp[[1]]))
lapply(corp[665:667], as.character)
getTransformations()
corp <- tm_map(corp, content_transformer(tolower))
writeLines(as.character(corp[[600]]))
stopword <- stopwords("english")
head(stopword)
length(stopword)
corp <- tm_map(corp,removeWords, stopwords("english"))
writeLines(as.character(corp[[600]]))
corp <- tm_map(corp, stemDocument)
writeLines(as.character(corp[[600]]))
stemDocumentfix <- function(x)
{
PlainTextDocument(paste(stemDocument(unlist(strsplit(as.character(x), " "))),collapse=' '))
}
corp <- tm_map(corp, stemDocumentfix)
dataframe<-data.frame(text=unlist(sapply(corp, `[`, "content")),stringsAsFactors=F)
View(dataframe)
dtm <- DocumentTermMatrix(corp)
dtm
freq <- colSums(as.matrix(dtm))
length(freq)
inspect(dtm[1:5, 1:5])
tdm <- TermDocumentMatrix(corp)
inspect(tdm[1:5,1:5])
tdm <- as.matrix(tdm)
findFreqTerms(dtm, 50)
corr <- cor(as.matrix(dtm))
corr[1:5,1:5]
findAssocs(dtm, "cat", 0.3)
simcorp <- removeSparseTerms(dtm, 0.4)
simcorp
chapdist <- dist(as.matrix(dtm), method = "binary")
library(flexclust)
install.packages("modeltools")
library(flexclust)
install.packages("stats4")
library(modeltools)
library(stats4)
library(flexclust)
install.packages("NbClust")
install.packages("rattle")
a = scale(iris)
head(iris)
iris[-1]
View(iris[-1])
View(iris)
View(iris[-3])
View(iris[-4])
View(iris[-5])
?wssplot
library(rattle)
library(rattle)
library(cluster)
library(rattle)
rattle()
?writeCorpus
libar
library(tm)
?writeCorpus
setwd("G:/graduate-student/研究生/课件/大数据研讨专题/week1/homework1")
raw <- read.csv("raw.csv", header = TRUE)
raw <- raw[,c(1:2)]
View(raw)
library(tm)
raw <- as.matrix(raw) #这一句没有就会错误
corp <- Corpus(DataframeSource(raw))
writeCorpus(corp, path = "G:/graduate-student/研究生/课件/大数据研讨专题/week1/homework1", filenames = "corp.txt")
library(tm)
raw <- as.matrix(raw) #这一句没有就会错误
corp <- Corpus(DataframeSource(raw))
writeCorpus(corp, path = "G:/graduate-student/研究生/课件/大数据研讨专题/week1/homework1", filenames = paste(seq_along(corp), ".txt", sep = ""))
rattle()
install.packages("recharts")
install.packages("recharts")
install.packages("plotly")
install.packages("recharts")
library(devtools)
devtools::install_github('taiyun/recharts')
install.packages("animation")
install.packages("flexdashboard", type = "source")
View(tdm)
library(animation)
?animation
data(diabetes)
diabetes
data(diabetes)
install.packages("timereg")
data(diabetes)
install.packages("lars")
library(lars)
data(diabetes)
library(lars)
data(diabetes)
class = diabetes$class
table(class)
diabetes
class
require(SnowballC)
require(SnowballC)
diabetes
require(lsa)
require(cluster)
require(pvclust)
require(mclust)
mclustModelNames("EII")
diabetes
str(diabetes)
setwd("G://graduate-student//研究生//课件//R//slidify")
library(slidify)
author("first-slidify")
slidify('learn-slidify.Rmd')
slidify('index.Rmd')
getwd()
author("test-revealjs")
